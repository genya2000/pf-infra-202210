AWSTemplateFormatVersion: "2010-09-09"
Description: Template generated by rain

Parameters:
  ServiceName:
    Type: String
    Default: switch_plus
    Description: Enter service name

  Env:
    Type: String
    Default: stg
    AllowedValues:
      - stg
      - prod
    Description: Enter stg or prod

Conditions:
  IsProd: !Equals [!Ref Env, 'prod']

Resources:
  BatchService:
    Type: AWS::ECS::Service
    DependsOn: BatchALBListener
    Properties:
      LaunchType: FARGATE
      TaskDefinition: !Ref BatchTaskDefinition
      PlatformVersion: 1.4.0
      Cluster:
        Fn::ImportValue: !Sub '${Env}-ECSCluster'
      ServiceName: !Sub '${Env}-batch'
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: !Sub '${Env}-batch'
          ContainerPort: 4440
          TargetGroupArn: !Ref BatchALBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub '${Env}-SecGroupECSBefore'
            - Fn::ImportValue: !Sub '${Env}-SecGroupECSAfter'
          Subnets:
            - Fn::ImportValue: !Sub '${Env}-ECSPrivateSubnetA'
            - Fn::ImportValue: !Sub '${Env}-ECSPrivateSubnetB'
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 420

  BatchTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: arn:aws:iam::176282227532:role/ECSTaskExecutionRole
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Sub '${Env}-batch'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Env}-switch-plus-batch'
          Memory: 2048
          PortMappings:
            - ContainerPort: 4440
              HostPort: 4440
              Protocol: tcp
          Essential: true
          EnvironmentFiles:
            - Type: s3
              Value: !Sub 'arn:aws:s3:::switch-plus/env/${Env}/cw-imedia-batch/.env'
      TaskRoleArn: arn:aws:iam::176282227532:role/ECSServiceTaskRoleForExecAccessToECS
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${ServiceName}-batch-taskdefinition'

  BatchLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Sub '${Env}-batch'
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue: !Sub '${Env}-PublicSubnetA'
        - Fn::ImportValue: !Sub '${Env}-PublicSubnetB'
      SecurityGroups:
        - Fn::ImportValue: !Sub '${Env}-BatchSecGroupAlb'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${ServiceName}-batch'

  BatchALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: BatchLoadBalancer
    Properties:
      TargetType: ip
      Name: !Sub '${Env}-batch'
      Protocol: HTTP
      Port: 4440
      IpAddressType: ipv4
      VpcId: 
        Fn::ImportValue: !Sub '${Env}-VpcId'
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: 4440
      HealthCheckPath: /user/login
      HealthCheckIntervalSeconds: 120
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5

        #  BasicAuthenticateFunctionTargetGroup:
        #    Type: AWS::ElasticLoadBalancingV2::TargetGroup
        #    DependsOn: [BatchLoadBalancer]
        #    Properties:
        #      Name: !Sub '${Env}-batch-lambda'
        #      TargetType: lambda
        #      Targets:
        #        - Id: !GetAtt BasicAuthenticateFunction.Arn
        #      HealthCheckEnabled: false

  BatchALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BatchLoadBalancer
      Certificates:
        - CertificateArn: arn:aws:acm:ap-northeast-1:176282227532:certificate/aa91ee9b-15fb-49b5-9155-52f3c3900e86
      Protocol: HTTPS
      Port: 443
      DefaultActions:
        - TargetGroupArn: !Ref BatchALBTargetGroup
          Type: forward

  DomainAssociateToBatchALB:
     Type: AWS::Route53::RecordSet
     Properties:
       HostedZoneId: !If [IsProd, 'Z0177204Z1QORSYMYUJY', 'Z01775893BUW4TMUUSEYY']
       Name: !If [IsProd, 'batch.switch-plus.jp', 'batch.stg.switch-plus.jp']
       Type: A
       AliasTarget:
         DNSName: !GetAtt BatchLoadBalancer.DNSName
         HostedZoneId: !GetAtt BatchLoadBalancer.CanonicalHostedZoneID

  BasicAuthenticateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BasicAuthentication
      Handler: index.Handler
      Role: !ImportValue LambdaExecutionRole
      Runtime: nodejs14.x
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
              const headers = event.headers || {};

              // ALB Health check
              if (headers['user-agent'] === 'ELB-HealthChecker/2.0') {
                  return {
                      statusCode: 200,
                      statusDescription: '200 OK',
                      isBase64Encoded: false,
                      headers: {
                          'Content-Type': 'text/html'
                      }
                  };
              }

              return {
                  statusCode: 401,
                  statusDescription: '401 Unauthorized',
                  body: 'Unauthorized',
                  isBase64Encoded: false,
                  headers: {
                      'WWW-Authenticate': 'Basic',
                      'Content-Type': 'text/html'
                  }
              };
          };
      Environment:
        Variables:
          BASIC_USER: !Sub '{{resolve:ssm:/switch-plus/${Env}/basic_user}}'
          BASIC_PASS: !Sub '{{resolve:ssm:/switch-plus/${Env}/basic_pass}}'
      Description: Invoke function when access to batch domein
      Tags:
        - Key: Name
          Value: basic-authentication

